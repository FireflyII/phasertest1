Phaser/javaScript questions:

As I understand it, Phaser consists of a number or "states," that represent the order of execution, and allows for things like separate levels, loading screens, etc. The primary states include "preload," which is used to import the images and sounds, "create," which builds the environment by creating the objects (and placing them), setting their properties, setting up animations, etc., and "update," which handles actually playing the game--it's a continuous loop.

The first tutorial I followed had all of these states in one file, and each was a single function. The next tutorial separates states into individual files, and the syntax is quite different.

Question #1: If the above understanding is correct, why does it seem like each state in the second tutorial also has a number of states? Does each state actually have nested states, or are these somehow getting called *during* the states of the program (i.e., during the "create" state, everything listed in 'create' from all of these files is used)?

Question #2: If groups are essentially a collection of objects, is there a way to reference specific members of a group other than having retained some pointer to it when it was created? If there are 100 stars in a group, and I want to find out which one is closest or farthest from the player, for example, is there a way to do that?

Question #3: Why are functions not called directly? They seem to be constatly invoked by creating new variables... For that matter, what gets returned? In the line:
	var hitPlatform = game.physics.arcade.collide(player, platforms);
what would the value of hitPlatform be?

Question #4: Ok, this is a slightly broader question. In my experience, an object can have a number of internal functions or variables, and using 'this' is a way of specifying that you want to refer to the local version of something. Here, however, 'this' gets used frequently, and I'm not sure why. For instance, why do we need
	this.game.add.text(this.game.width/2, this.game.height/2.......
Is 'game' a property of the MainMenu object/state? Similarly, 'this.<something>' shows up so much that I'm wondering if you can call whatever you want with it, and not have to worry about creating variables directly. For example, in Game.js, the showLabels function has a line with this.scoreLabel =.... did that create the scoreLabel variable?

Question #5: Piggybacking on question #4, it's hard to know what values anything can have... we have this.game.world.setBounds(), and this.game.camera.follow(this.player), but we also have simply this.background. Does that mean that any object can have a background?

Question #6: Continuing from the last two questions, why does creating the background and the player need to refer to this.game.world.width and this.game.world.centerX, but the MainMenu just uses this.game.width? What's the difference between the width of the game, and of the game world?

Question #7: The preload state uses this.splash and this.preloadBar...are these built-in, or just variable names for sprites? What does anchoring them do?

Question #8: Why did the first tutorial need to create a "cursors" object with game.input.keyboard.createCursorKeys() before accepting any input, while the second one just jumps in with
if(this.game.input.activePointer.justPressed())? Is it not necessary to have an object for the mouse?
